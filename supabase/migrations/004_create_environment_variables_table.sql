-- Create environment variables table for storing API keys
CREATE TABLE IF NOT EXISTS public.environment_variables (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    key TEXT UNIQUE NOT NULL,
    value TEXT NOT NULL,
    description TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- Enable RLS
ALTER TABLE public.environment_variables ENABLE ROW LEVEL SECURITY;

-- Create policy to allow service role to read/write environment variables
CREATE POLICY "Service role can manage environment variables" ON public.environment_variables
    FOR ALL USING (auth.role() = 'service_role');

-- Create policy to prevent regular users from accessing environment variables
CREATE POLICY "Regular users cannot access environment variables" ON public.environment_variables
    FOR ALL USING (false);

-- Insert API key placeholders (these will be updated with actual values)
INSERT INTO public.environment_variables (key, value, description) VALUES
    ('TICKETMASTER_API_KEY', '', 'Ticketmaster Discovery API Key'),
    ('RAPIDAPI_KEY', '', 'RapidAPI Key for event search services'),
    ('EVENTBRITE_API_KEY', '', 'Eventbrite API Key'),
    ('EVENTBRITE_PRIVATE_TOKEN', '', 'Eventbrite Private Token for OAuth'),
    ('PREDICTHQ_API_KEY', '', 'PredictHQ API Key for event intelligence'),
    ('MAPBOX_API_KEY', '', 'Mapbox API Key for maps and location services'),
    ('TOMTOM_API_KEY', '', 'TomTom API Key for location services'),
    ('OPENROUTER_API_KEY', '', 'OpenRouter API Key for AI services')
ON CONFLICT (key) DO NOTHING;

-- Create function to update environment variable
CREATE OR REPLACE FUNCTION update_environment_variable(var_key TEXT, var_value TEXT)
RETURNS VOID AS $$
BEGIN
    UPDATE public.environment_variables 
    SET value = var_value, updated_at = NOW()
    WHERE key = var_key;
    
    IF NOT FOUND THEN
        INSERT INTO public.environment_variables (key, value)
        VALUES (var_key, var_value);
    END IF;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Grant execute permission to service role
GRANT EXECUTE ON FUNCTION update_environment_variable(TEXT, TEXT) TO service_role;

-- Create updated_at trigger
CREATE OR REPLACE FUNCTION trigger_set_timestamp()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER set_timestamp
    BEFORE UPDATE ON public.environment_variables
    FOR EACH ROW
    EXECUTE FUNCTION trigger_set_timestamp();